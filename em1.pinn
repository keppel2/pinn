//Parse and run
0;
10;
1 + 2 + 3 + 4;
var xa int;
var xb [2]int;

xa;
xa++;
xa--;

sda := 0;
sdb := -1;

[4, 65];
2@5;
(5);
-8;
-(4);
+10;

// Underline

_ = 4;
_ = sda;


// Function

func fA() {}
fA();
func fB(p int) {}
fB(42);

func fR() int { return 5; }
fR();

func fRR(p int) int { return p + 1; }
fRR(12);
fRR(fR());
fRR(fRR(2));

//Assert
// Expressions
assert(7 + 3, 10);
assert(7 - 3, 4);
assert(7 * 3, 21);
assert(7 / 3, 2);
assert(7 % 3, 1);

assert(3 + 7, 10);
assert(3 - 7, -4);
assert(3 * 7, 21);
assert(3 / 7, 0);
assert(3 % 7, 3);

assert((8), 8);
assert((((3))), 3);

assert(1 + 2 * 3, 9);
assert(1 + (2 * 3), 7);

assert(1 + 1 + 1 + 1, 4);
assert(-5, 0 - 5);
//assert(+3, 3);


// Basics
var v int;
v = 0;
assert(v, v);
assert(0, 0);
assert(v, 0);
assert(0, v);
v = 2;
assert(v, 2);
v = v + 5;
assert(v, 7);
var v2 int;
v = 5;
v2 = 1 + 3;
assert(v2, 4);
v2 = v - 2 - 0 - 1;
assert(v2, 2);
var v3 int;
v3 = v * v2 * 2;
assert(v3, 20);


// Short declaration

a := 2;
assert(a, 2);
b := 3;
assert(b, 3);

c := a + b;
assert(c, 5);

a = 1;
b = 2;
c = 3;
d := a + b + c;
assert(d, 6);
e := a + b + c + d;
assert(e, 12);
f := a + b + c + d + e;
assert(f, 24);

// Multi assign

sx := 2;
sy := 4;
sx, sy = sy, sx;
assert(sx, 4);
assert(sy, 2);

sxx := 4;
sar := [5, 8];
sxx, sar[0] = sar[1], sxx;
assert(sxx, 8);
assert(sar[0], 4);
assert(sar[1], 8);

var mar [2]int;
mar = [2, 5];
me := 0;
mar[me], me = 7, 1;
assert(mar[0], 7);
assert(mar[1], 5);

// Function assertions

func fret() int {
return 187;
}
assert(fret(), 187);

func fin(fa int) {
  assert(fa, 187);
}

fin(187);
fin(fret());

func ftran(fa int) int {
  return fa + 5;
}


assert(ftran(ftran(5)), 15);

fglob := 5;
func fas(fa int) int {
lglob := fglob + 1;
fglob -= fa;
return lglob;
}

assert(fas(2), 6);
assert(fas(3), 4);

func g1() int {
return 101;
}
func f2() int {
return 202;
}
func g2() int {
return f2();
}

a = 3;

a = g1();
assert(a, 101);

a = g2();
assert(a, 202);

// Multi function
func mf() int, int {
  return 2, 5;
}
func mf3() int, int, int {
  return 4, 6, 8;
}
mfa, mfb := mf();
assert(mfa, 2);
assert(mfb, 5);
var mfc int;
mfa, mfb, mfc = mf3();
assert(mfa, 4);
assert(mfb, 6);
assert(mfc, 8);










// if
if 1 < 3 {}
if 3 > 1 {}
if 1 < 3 {} else {}
if 3 < 4 ;
if 3 < 4 ; else ;
if 1 < 3 {} else ;

ifa := 5;

if ifa <= 2 {
  bad();
}

a = 5;
if 10 < a {
  bad();
}
if a > 20 {
  bad();
}
if a > 3 {
  a = 10;
  if a > 7 {
    a = 42;
  }
}
assert(a, 42);

iftrig := 0;
if 5 > 3
  iftrig = 1;
assert(iftrig, 1);

if 3 < 1 {
  bad();
}

a = 22;
if a == 23 {
a = 101;
} else {
a = 202;
}
assert(a, 202);


// Loop break/continue
a = 5;
loop {
  a = 1024;
  break;
}

assert(a, 1024);

a = 1;
loop {
  a = a + 1;
  if a < 5 {
    continue;
  }
  break;
}
assert(a, 5);

loop {
  loop {
    break;
  }
  a = 42;
  break;
}
assert(a, 42);


// While
while 4 < 2 {}

a = 12;
while a > 8 {
a = a - 1;
}
assert(a, 8);

a = 4;
while a < 8 {
  a = a + 1;
  if a == 6 {
    break;
  }
}
assert(a, 6);

a = 10;
while a < 15 {
  a = a + 1;
  continue;
  a = 25;
}
assert(a, 15);

// For
for 5; 5 < 3; {}
for ;;15 { break; }




b = 2;
for a = 5; a < 7; a = a + 1 {
  b = b + a;
}
assert(b, 13);

for a = 2; a < 7; a = a + 1 {
  break;
}
assert(a, 2);











