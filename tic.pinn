EMPTY := 0;
FALSE := 0;
TRUE := 1;
TIE := 3;
PLAYER_A := 1;
PLAYER_B := 2;
SIZE := 3;
SQSIZE := SIZE * SIZE;
count := 0;


func minimax (player int, depth int, flob [9]int) int
{

 count++;
 i := 0;
 result := 0;
  best := opposite(player);

  result = winner(flob);

  if result != TIE {
    return result;
  }
  if full(flob) == TRUE {
        return TIE;
  }
  x := 0;
  y := 0;
  for x = range (0:SIZE) {
    for y = range (0:SIZE) {
      if flob[xy(x, y)]  == EMPTY {
        flob[xy(x, y)] = player;
 
        result = minimax(opposite(player), depth + 1, flob);
        if result == player {
          return player;
        }
        if result == TIE {
          best = TIE;
        }
        flob[xy(x, y)] = EMPTY;
 
      }
    }
  }
  return best;
}

func printBoard (flob [9]int) {
  ii := 0;
  jj := 0;
  var i, j int;
    print(i);print(j);
  for i = 0; i < SIZE; i++ {
    print(i);print(j);
    for j = 0; j < SIZE; j++ {
    print(i);print(j);
      print(flob[xy(i, j)]);
    }
    println();
  }
}

func xy (fx, fy int) int {
  return fy * SIZE + fx;
}


func full (flob [9]int) int {
  i := 0;
  for i = 0; i < SQSIZE; i++ {
    if flob[i] == EMPTY {
      return FALSE;
    }
  }
  return TRUE;
}

func line (x int, y int, dx int, dy int, flob [9]int) int {
    comp := flob[xy(x, y)];
    if comp == EMPTY {
        return TIE;
    }
    loop {
      if x + dx < SIZE {
        if y + dy < SIZE {
          x += dx;
          y += dy;
          if flob[xy(x, y)] != comp {
            return TIE;
          }
          continue;
        }
      }
      break;
    }
    return comp;
}

func winner (flob [9]int) int {
  i := 0;
  rt := 0;
  for i = 0; i < SIZE; i++ {

        rt = line(i, 0, 0, 1, flob);
        if rt != TIE
            return rt;
        rt = line(0, i, 1, 0, flob);
        if rt != TIE
            return rt;
    }
    rt = line(0, 0, 1, 1, flob);
    if rt != TIE {
        return rt;
    }
    rt = line(0, SIZE - 1, 1, 0-1, flob);
    return rt;
}

func opposite (opx int) int { 
 if opx == PLAYER_A {
   return PLAYER_B;
 }
 return PLAYER_A;
 }


func main() {
  var flob [9]int;
  x := minimax(PLAYER_A, 0, flob);
  
}
main();
assert(count, 0x17302);
