EMPTY = 0;
FALSE = 0;
TRUE = 1;
TIE = 3;
PLAYER_A = 1;
PLAYER_B = 2;
SIZE = 2;
SQSIZE = SIZE * SIZE;


var glob [4]int;
i5 = 0;
  for i5 = 0; i5 < SQSIZE; i5++ {
    glob[i5] = EMPTY;
  }
printBoard();
func printBoard () {
  i = 0;
  j = 0;
  for i = 0; i < SIZE; i++ {
    for j = 0; j < SIZE; j++ {
    print(i);print(j);
      print(glob[xy(i, j)]);
    }
    println();
  }
}
return 42;

func xy (fx, fy int) int {
  return fy * SIZE + fx;
}


func full () int {
  i = 0;
  for i = 0; i < SQSIZE; i++ {
    if glob[i] == EMPTY {
      return FALSE;
    }
  }
  return TRUE;
}

func line (x int, y int, dx int, dy int) int {
    comp = glob[xy(x, y)];
    if comp == EMPTY {
        return TIE;
    }
    loop {
      if x + dx < SIZE {
        if y + dy < SIZE {
          x += dx;
          y += dy;
          if glob[xy(x, y)] != comp {
            return TIE;
          }
          continue;
        }
      }
      break;
    }
    return comp;
}

func winner () int {
  i = 0;
  for i = 0; i < SIZE; i++ {

        rt = line(i, 0, 0, 1);
        if rt != TIE
            return rt;
        rt = line(0, i, 1, 0);
        if rt != TIE
            return rt;
    }
    rt = line(0, 0, 1, 1);
    if rt != TIE {
        return rt;
    }
    rt = line(0, SIZE - 1, 1, 0-1);
    return rt;
}

func opposite (opx int) int { 
 if opx == PLAYER_A {
   return PLAYER_B;
 }
 return PLAYER_A;
 }


      
func minimax (player int) int
{
 var flob [4]int; 
 i = 0;
 for i = 0; i < SQSIZE; i++ {
   flob[i] = glob[i];
 }
  best = opposite(player);

  result = winner();

  if result != TIE {
    return result;
  }
  if full() == 1 {
        return TIE;
  }
  print(11);
  x = 0;
  y = 0;
  for x = 0; x < SIZE; x++ {
    for y = 0; y < SIZE; y++ {
    if flob[xy(x, y)]  == EMPTY {
        flob[xy(x, y)] = player;
 for i = 0; i < SQSIZE; i++ {
   glob[i] = flob[i];
 }
 
        result = minimax(opposite(player));
      if result == player {
        return player;
      }
      if result == TIE {
        best = TIE;
      }
      flob[xy(x, y)] = EMPTY;
    }
  }
  }
  return best;
}
func main() {
print(PLAYER_A);
    result = minimax (PLAYER_A);
}
printBoard();
main();
