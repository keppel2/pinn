ar := [2, 23, 42];
assert(ar[0], 2);
assert(ar[2], 42);
x := 12 < 4 ? 10 : 5;
assert(x, 5);
x = 12 > 4 ? 10 : 5;
assert(x, 10);

func n4() int {
return 4;
}

func n7() int {
return 7;
}

if n7() < n4() {
  bad();
}

if n4() > n7() {
  bad();
}


if n4() + 3 != n7() {
  bad();
}

if n4() != n7() - 3 {
  bad();
}

gar := [1, 5, 10];
func afu(lar [3]int) {
  assert(lar[0], 1);
  assert(lar[2], 10);
}
afu(gar);

if n4() < 1 || n7() != 7 {
  bad();
}

trig := 1;
if n4() == 4 || n7() != 7 {
  trig = 2;
}
assert(trig, 2);

trig = 1;
if n7() != 7 || n4() == 4 {
  trig = 2;
}
assert(trig, 2);

trig = 1;
if n4() < 1 || n7() == 7 {
 trig = 2;
}
assert(trig, 2);

if 2 < 3 && 4 < 3 {
  bad();
}

if 4 < 3 && 2 < 3 {
  bad();
}

if 2 > 3 && 3 > 4 {
  bad();
}

trig = 1;

if 2 < 3 && 3 < 4 {
  trig = 2;
}

assert(trig, 2);

oo2 := 1 + (2 * 3);
assert(oo2, 7);

nx := -2;
assert(nx, -2);

var zx int;
assert(zx, 0);

func zxf() {
  var fx int;
  assert(fx, 0);
}
zxf();

var mar [4]int;
assert(len(mar), 4);

ss := 3@5;
assert(ss[0], 3);
assert(ss[1], 4);
assert(ss[2], 5);
