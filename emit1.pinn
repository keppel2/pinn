// Parse and run

0;
10;
1 + 2 + 3 + 4;
var xa int;
xa;
xa++;
xa--;
xa += xa;
xa *= xa;
xa = 0;
xa = 1;
var xb [2]int;
xb[0];
xb[0] = 0;
xb[1] = xb[0];
sda := 0;
sdb := -1;
[4, 65];
2@5;
(5);
-(4);

// Basics
var v int;
v = 0;
assert(v, 0);
v = 2;
assert(v, 2);
v = v + 5;
assert(v, 7);
var v2 int;
v = 5;
v2 = 1 + 3;
assert(v2, 4);
v2 = v - 2 - 0 - 1;
assert(v2, 2);
var v3 int;
v3 = v * v2 * 2;
assert(v3, 20);


// Short declaration

a := 2;
assert(a, 2);
a = a + 1;
assert(a, 3);
a = a - 1;
assert(a, 2);
b := 3;
assert(b, 3);

c := a + b;
assert(c, 5);
c = 1 + 7;
assert(c, 8);
c = 1 + 3 + a;
assert(c, 6);

c = a * b;
assert(c, 6);
c = b - a;
assert(c, 1);

a = 20;
c = a / b;
assert(c, 6);

c = a % b;
assert(c, 2);
c = a % 2;
assert(c, 0);



// Multi assign (swap)

sx := 2;
sy := 4;
sx, sy = sy, sx;
assert(sx, 4);
assert(sy, 2);

sxx := 4;
sar := [5, 8];
sxx, sar[0] = sar[1], sxx;
assert(sxx, 8);
assert(sar[0], 4);
assert(sar[1], 8);

/*
mar := [2, 5];
me := 0;
mar[me], me = 7, 1;
assert(mar[0], 7);
assert(mar[1], 5);
*/

a = 5;
if a <= 2 {
  bad();
}
if 10 < a {
  bad();
}
if a > 20 {
  bad();
}
if a > 3 {
  a = 10;
  if a > 7 {
    a = 42;
  }
}
assert(a, 42);
if 3 < 1 {
  bad();
}
loop {
  a = 1024;
  break;
}
assert(a, 1024);
a = 1;
loop {
  a = a + 1;
  if a < 5 {
    continue;
  }
  break;
}
assert(a, 5);

a = 12;
while a > 8 {
a = a - 1;
}
assert(a, 8);

a = 4;
while a < 8 {
  a = a + 1;
  if a == 6 {
    break;
  }
}
assert(a, 6);

a = 10;
while a < 15 {
  a = a + 1;
  continue;
  a = 25;
}
assert(a, 15);
 
loop {
  loop {
    break;
  }
  a = 42;
  break;
}
assert(a, 42);

if a == 23 {
a = 101;
} else {
a = 202;
}
assert(a, 202);
func f1(aa int) {
assert(aa, 42);
}
func g1() int {
return 101;
}
func f2() int {
return 202;
}
func g2() int {
return f2();
}


f1(42);
a = g1();
assert(a, 101);

a = 1;
b = 2;
c = 3;
d := a + b + c;
assert(d, 6);
e := a + b + c + d;
assert(e, 12);
f := a + b + c + d + e;
assert(f, 24);
f = g2();
assert(f, 202);



ar := g1() + 0;
assert(ar, 101);
ar = 0 + g1();
assert(ar, 101);
func fact(fa int) int {
  if fa == 1 {
    return 1;
  }
  x := fa;
  y := fact(fa - 1);
  return x * y;
}


func fl() {
var fll int;
fll = fact(4);
fll2 := 5;
assert(fll, 24);

}
fl();

b = 0;
for a = 5; a < 7; a = a + 1 {
  b = b + a;
}
assert(b, 11);

for a = 2; a < 7; a = a + 1 {
  break;
}
assert(a, 2);

xp := 1 + (2 * 3);
assert(xp, 7);
xp = (1 + 2) * 3;
assert(xp, 9);
