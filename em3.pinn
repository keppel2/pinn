ar := [2, 23, 42];
assert(ar[0], 2);
assert(ar[2], 42);
x := 12 < 4 ? 10 : 5;
assert(x, 5);
x = 12 > 4 ? 10 : 5;
assert(x, 10);

func n4() int {
return 4;
}

func n7() int {
return 7;
}

if n7() < n4() {
  bad();
}

if n4() > n7() {
  bad();
}


if n4() + 3 != n7() {
  bad();
}

if n4() != n7() - 3 {
  bad();
}

gar := [1, 5, 10];
func afu(lar [3]int) {
  assert(lar[0], 1);
  assert(lar[2], 10);
}
afu(gar);

if n4() < 1 || n7() != 7 {
  bad();
}

trig := 1;
if n4() == 4 || n7() != 7 {
  trig = 2;
}
assert(trig, 2);

trig = 1;
if n7() != 7 || n4() == 4 {
  trig = 2;
}
assert(trig, 2);

trig = 1;
if n4() < 1 || n7() == 7 {
 trig = 2;
}
assert(trig, 2);

if 2 < 3 && 4 < 3 {
  bad();
}

if 4 < 3 && 2 < 3 {
  bad();
}

if 2 > 3 && 3 > 4 {
  bad();
}

trig = 1;

if 2 < 3 && 3 < 4 {
  trig = 2;
}

assert(trig, 2);

oo2 := 1 + (2 * 3);
assert(oo2, 7);

nx := -2;
assert(nx, -2);

var zx int;
assert(zx, 0);

func zxf() {
  var fx int;
  assert(fx, 0);
}
zxf();

var mar [3]int;
assert(len(mar), 3);
assert(mar[0], 0);
assert(mar[1], 0);
assert(mar[2], 0);

/*
ss := 5@7;
assert(ss[0], 5);
assert(ss[1], 6);
assert(ss[2], 7);
assert(len(ss), 3);

ss2 := 7:9;
assert(ss2[0], 7);
assert(ss2[1], 8);
*/

var rx, k int;
rar := [15, 7, 187];
for k, rx = range rar {
  assert(rar[k], rx);
}
for k, rx = range [12, 32, 187] {
  assert(k, 0);
  assert(rx, 12);
  break;
}
for k, rx = range 11:14 {
  assert(k + 11, rx);
}

var sce []int;
sar := [3,5,7,9,8,6];
sce = sar[1@3];
sce[0];


assert(sce[0], 5);
assert(sce[2], 9);
