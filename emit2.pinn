func f(aa, bb int) int {
  return aa + bb;
}

assert(f(1, 2), 3);

if 10 + 11 < 12 {
  bad();
}

if 5 < 1 + 0 {
  bad();
}
x := 10;
x++;
assert(x, 11);
x--;
x--;
assert(x, 9);
var ar[6]int;
ar[2] = 42;
ar[5] = 101;
assert(ar[2], 42);
x = 3;
assert(ar[2 + x], 101);
ar[5]++;
assert(ar[5], 102);
ar[2]--;
assert(ar[2], 41);
ar[2] += 5;
assert(ar[2], 46);
/*
ar[2] %= 10;
assert(ar[2], 6);
*/
a := 12;
a -= 8;
assert(a, 4);
a += 2;
assert(a, 6);

func g(a1, b1 int) int {
  a1 += 1;
  b1 *= 2;
  return a1 * b1;
}

z := g(1, 3);
assert(z, 12);
func fl() {
a = 5;
}


fl();
glob := 10;
func fg2(fa int) int{
  glob = fa + 3;
  return fa - 2;
}
func fg() int {
  assert(glob, 10);
  x = fg2(glob * 2);
  return x - 5;
}
xx := fg();
assert(glob, 23);
assert(xx, 13);

modx := 3;
modx %= 2;
assert(modx, 1);

var arG [2]int;
arG[0] = 2;
func argf() {
var arL [2]int;
arG[1] = 4;
arL[0] = 7;
assert(arL[0], 7);
}
assert(arG[0], 2);
argf();
assert(arG[1], 4);

gmm := 3;
func fgmm() {
gmm--;
}
fgmm();
assert(gmm, 2);



g := 3;
func far() {
var nar [2]int;
nar[1] = g;
x = g;
g--;
assert(nar[1], x);
}
far();
